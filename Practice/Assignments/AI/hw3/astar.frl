
((clear t))

((exec_state ()))
((exec_state (H|T))
	(addcl (H))
	(exec_state T))

((clear_pairs C1 C2)
	(clear C1)
	(clear C2)
	(negg on C1 C2)
	(negg eq C1 t)
	(negg eq C1 C2))

((heuristic L1 L2 J)
  (ints L1 L2 INT) (length INT LINT)
  (uni L1 L2 UNI) (length UNI LUNI)
  (times LUNI J LINT))

((append () L L))
((append (H|T) L2 (H|L))(append T L2 L))

((delete A () ()))
((delete A (B) (B))
	(negg eq A B))
((delete A (A|B) B))
((delete A (B C|D) (B|E))
	(delete A (C|D) E))

((member H (H|_)))
((member X (H|T))(member X T))

((append_clear_bottom STate B STate) (on B t))
((append_clear_bottom STate B STate2)
	(on B X)
	(negg eq X t)
	(append STate ((clear X)) STate2))

((assert_transition STate B1 B2)
  (delete (on B1 _) STate STate2)
  (delete (clear B2) STate2 STate3)
  (append STate3 ((on B1 B2)) STate4)
  (append_clear_bottom STate4 B1 STate5)
  (addcl ((mov STate STate5))))

((check_equivalence (H|()) GOal)
  (member H GOal))
((check_equivalence (H|T) GOal)
  (member H GOal)
  (check_equivalence T GOal))

((member_state_stack NExt (H|_))
  (check_equivalence NExt H))
((member_state_stack NExt (H|T))
  (member_state_stack NExt T))

((assert_child_states STate)
  (exec_state STate)
  (forall ((clear_pairs C1 C2)) ((assert_transition STate C1 C2)))
  (delete_state STate))

((delete_state (PRed|PReds))
  (delcl (PRed))
  (delete_state PReds))
((delete_state ()))


%-------------------------A*------------------------------

((state_record STate PArent G H F (STate PArent G H F)))
((precedes (_ _ _ _ F1) (_ _ _ _ F2))  (negg less F1 F2))

((go STart GOal)
    (empty_set CLosed)
    (empty_sort_queue EMpty_open)
    (heuristic STart GOal H)
    (state_record STart nil 0 H H FIrst_record)
    (insert_sort_queue FIrst_record EMpty_open OPen)
    (path OPenCLosed GOal))

((path OPen _ _)
    (empty_sort_queue OPen)
    (pp "graph searched no solution found"))

((path OPen CLosed GOal)
    (remove_sort_queue FIrst_record OPen _)
    (state_record STate _ _ _ _ FIrst_record)
    (check_equivalence STate GOal)
    (pp 'SOlution path is: ') nl
    (printsolution FIrst_record CLosed))

((path OPen CLosed GOal)
    (remove_sort_queue FIrst_record OPen REst_of_open)
    (findall CHild (moves FIrst_record OPen CLosed CHild GOal) CHildren)
    (insert_list CHildren REst_of_open NEw_open)
    (add_to_set FIrst_record CLosed NEw_closed)
    (path NEw_open NEw_closed GOal)!)

((moves STate_record OPen CLosed CHild GOal)
    (state_record STate _ G _ _ STate_record)
    (assert_child_states STate)
    (mov STate NExt)
    (state_record NExt _ _ _ _ TEst)
    (negg (member_state_stack TEst OPen))
    (negg (member_state_stack TEst CLosed))
    (sum G 1 G_new)
    (heuristic NExt GOal H)
    (sum G_new H F)
    (state_record NExt STate G_new H F CHild))

((insert_list () L L))
((insert_list (STate | TAil) L NEw_L)
    (insert_sort_queue STate L L2)
    (insert_list TAil L2 NEw_L))

((printsolution NExt_record _)
    (state_record STate nil _ __ NExt_record)
    (pp STate) nl)
((printsolution NExt_record CLosed)
    (state_record STate PArent _ _ _ NExt_record)
    (state_record PArent _ _ _ _ PArent_record)
    (member_set PArent_record CLosed)
    (printsolution PArent_record CLosed)
    (pp STate) nl)

%------------------STack-----------------------


((empty_stack ()))

((member_stack E S) (member E S))

((stack E S (E|S)))

%-------------------QUEUE--------------------

((empty_queue ()))

((member_queue E S) (member E S))

((add_to_queue E () (E)))
((add_to_queue E (H|T) (H|TNew)) (add_to_queue E T TNew))

((remove_from_queue E (E|T) T))

((append_queue FIrst SEcond COncatenation)
    (append FIrst SEcond COncatenation))

%------------------SET----------------------

((empty_set ()))

((member_set E S) (member E S))

((add_to_set X S S)(member X S) (!))
((add_to_set X S (X|S)))

((remove_from_set _ () ()))
((remove_from_set E (E|T) T) (!))
((remove_from_set E (H|T) (H|T_new))
    (remove_from_set E T T_new) (!))

((set_union () S S))
((set_union (H|T) S S_new)
    (set_union T S S2)
    (add_to_set H S2 S_new))

((set_intersection () _ ()))
((set_intersection (H|T) S (H|S_new))
    (member_set H S)
    (set_intersection T S S_new) (!))
((set_intersection (_|T) S S_new)
    (set_intersection T S S_new)(!))

((set_diff () _ ()))
((set_diff (H|T) S T_new)
    (member_set H S)
    (set_diff T S T_new) (!))
((set_diff (H|T) S (H|T_new))
    (set_diff T S T_new) (!))

((subset () _))
((subset (H|T) S)
    (member_set H S)
    (subset T S))

((equal_set S1 S2)
    (subset S1 S2)
	(subset S2 S1))

%-------------------------PRIORITY QUEUE--------------------


((empty_sort_queue ()))

((member_sort_queue E S) (member E S))

((insert_sort_queue STate () (STate)))
((insert_sort_queue STtate (H | T) (STate H | T))
    (precedes STate H))
((insert_sort_queue STate (H|T) (H | T_new))
    (insert_sort_queue STate T T_new))

((remove_sort_queue FIrst (FIrst|REst) REst))

%------------------------QUERIES--------------------


?((go ((on a t) (on b a) (on c b) (clear c)) ((on c t) (clear a) (on b c) (on a b))))

